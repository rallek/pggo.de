<?php
/**
 * Team.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\TeamModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\UsersModule\Entity\UserEntity;
use RK\TeamModule\Traits\EntityWorkflowTrait;
use RK\TeamModule\Traits\StandardFieldsTrait;

use RuntimeException;
use ServiceUtil;
use Zikula\Core\Doctrine\EntityAccess;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for person entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractPersonEntity extends EntityAccess
{
    /**
     * Hook entity workflow field and behaviour.
     */
    use EntityWorkflowTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'person';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed
     */
    protected $_bypassValidation = false;
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=1000000000)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $lastName
     */
    protected $lastName = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $firstName
     */
    protected $firstName = '';
    
    /**
     * Team member image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $teamMemberImageMeta
     */
    protected $teamMemberImageMeta = [];
    
    /**
     * Please upload a portait formated image file.
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
        allowSquare = false,
        allowLandscape = false
     * )
     * @var string $teamMemberImage
     */
    protected $teamMemberImage = null;
    
    /**
     * Full team member image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $teamMemberImageUrl
     */
    protected $teamMemberImageUrl = '';
    
    /**
     * The function the person do have inside the team.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $teamMemberFunction
     */
    protected $teamMemberFunction = '';
    
    /**
     * A description about the team member.
     * @ORM\Column(type="text", length=5000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="5000")
     * @var text $teamMemberDescription
     */
    protected $teamMemberDescription = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $phoneNumber
     */
    protected $phoneNumber = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $mobileNumber
     */
    protected $mobileNumber = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $personEmailAddress
     */
    protected $personEmailAddress = '';
    
    /**
     * @ORM\Column(type="text", length=500)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="500")
     * @var text $personAddress
     */
    protected $personAddress = '';
    
    /**
     * Here you can select which registered user is this person.
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid")
     * @Assert\NotNull()
     * @var UserEntity $registeredUser
     */
    protected $registeredUser = 0;
    
    /**
     * the filter field is used for special block filtering. If you do not know anything about this please leave empty. No spaces are allowed.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Regex(pattern="/\s/", match=false, message="This value must not contain space chars.")
     * @Assert\Length(min="0", max="255")
     * @var string $filter
     */
    protected $filter = '';
    
    
    
    /**
     * PersonEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->initWorkflow();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Returns the _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Sets the _bypass validation.
     *
     * @param boolean $_bypassValidation
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = intval($id);
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = isset($workflowState) ? $workflowState : '';
    }
    
    /**
     * Returns the last name.
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }
    
    /**
     * Sets the last name.
     *
     * @param string $lastName
     *
     * @return void
     */
    public function setLastName($lastName)
    {
        $this->lastName = isset($lastName) ? $lastName : '';
    }
    
    /**
     * Returns the first name.
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }
    
    /**
     * Sets the first name.
     *
     * @param string $firstName
     *
     * @return void
     */
    public function setFirstName($firstName)
    {
        $this->firstName = isset($firstName) ? $firstName : '';
    }
    
    /**
     * Returns the team member image.
     *
     * @return string
     */
    public function getTeamMemberImage()
    {
        return $this->teamMemberImage;
    }
    
    /**
     * Sets the team member image.
     *
     * @param string $teamMemberImage
     *
     * @return void
     */
    public function setTeamMemberImage($teamMemberImage)
    {
        $this->teamMemberImage = $teamMemberImage;
    }
    
    /**
     * Returns the team member image url.
     *
     * @return string
     */
    public function getTeamMemberImageUrl()
    {
        return $this->teamMemberImageUrl;
    }
    
    /**
     * Sets the team member image url.
     *
     * @param string $teamMemberImageUrl
     *
     * @return void
     */
    public function setTeamMemberImageUrl($teamMemberImageUrl)
    {
        $this->teamMemberImageUrl = $teamMemberImageUrl;
    }
    
    /**
     * Returns the team member image meta.
     *
     * @return array
     */
    public function getTeamMemberImageMeta()
    {
        return $this->teamMemberImageMeta;
    }
    
    /**
     * Sets the team member image meta.
     *
     * @param array $teamMemberImageMeta
     *
     * @return void
     */
    public function setTeamMemberImageMeta($teamMemberImageMeta = [])
    {
        $this->teamMemberImageMeta = $teamMemberImageMeta;
    }
    
    /**
     * Returns the team member function.
     *
     * @return string
     */
    public function getTeamMemberFunction()
    {
        return $this->teamMemberFunction;
    }
    
    /**
     * Sets the team member function.
     *
     * @param string $teamMemberFunction
     *
     * @return void
     */
    public function setTeamMemberFunction($teamMemberFunction)
    {
        $this->teamMemberFunction = isset($teamMemberFunction) ? $teamMemberFunction : '';
    }
    
    /**
     * Returns the team member description.
     *
     * @return text
     */
    public function getTeamMemberDescription()
    {
        return $this->teamMemberDescription;
    }
    
    /**
     * Sets the team member description.
     *
     * @param text $teamMemberDescription
     *
     * @return void
     */
    public function setTeamMemberDescription($teamMemberDescription)
    {
        $this->teamMemberDescription = isset($teamMemberDescription) ? $teamMemberDescription : '';
    }
    
    /**
     * Returns the phone number.
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->phoneNumber;
    }
    
    /**
     * Sets the phone number.
     *
     * @param string $phoneNumber
     *
     * @return void
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->phoneNumber = isset($phoneNumber) ? $phoneNumber : '';
    }
    
    /**
     * Returns the mobile number.
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->mobileNumber;
    }
    
    /**
     * Sets the mobile number.
     *
     * @param string $mobileNumber
     *
     * @return void
     */
    public function setMobileNumber($mobileNumber)
    {
        $this->mobileNumber = isset($mobileNumber) ? $mobileNumber : '';
    }
    
    /**
     * Returns the person email address.
     *
     * @return string
     */
    public function getPersonEmailAddress()
    {
        return $this->personEmailAddress;
    }
    
    /**
     * Sets the person email address.
     *
     * @param string $personEmailAddress
     *
     * @return void
     */
    public function setPersonEmailAddress($personEmailAddress)
    {
        $this->personEmailAddress = isset($personEmailAddress) ? $personEmailAddress : '';
    }
    
    /**
     * Returns the person address.
     *
     * @return text
     */
    public function getPersonAddress()
    {
        return $this->personAddress;
    }
    
    /**
     * Sets the person address.
     *
     * @param text $personAddress
     *
     * @return void
     */
    public function setPersonAddress($personAddress)
    {
        $this->personAddress = isset($personAddress) ? $personAddress : '';
    }
    
    /**
     * Returns the registered user.
     *
     * @return UserEntity
     */
    public function getRegisteredUser()
    {
        return $this->registeredUser;
    }
    
    /**
     * Sets the registered user.
     *
     * @param UserEntity $registeredUser
     *
     * @return void
     */
    public function setRegisteredUser($registeredUser)
    {
        $this->registeredUser = $registeredUser;
    }
    
    /**
     * Returns the filter.
     *
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }
    
    /**
     * Sets the filter.
     *
     * @param string $filter
     *
     * @return void
     */
    public function setFilter($filter)
    {
        $this->filter = isset($filter) ? $filter : '';
    }
    
    
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $listHelper = ServiceUtil::get('rk_team_module.listentries_helper');
    
        $formattedTitle = ''
                . $this->getLastName()
                . ', '
                . $this->getFirstName();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getWorkflowStateAllowedValues()
    {
        $container = ServiceUtil::get('service_container');
        $helper = $container->get('rk_team_module.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForPerson();
    
        $allowedValues = ['initial'];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Checks whether the registeredUser field contains a valid user id.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     *
     * @return boolean True if data is valid else false
     */
    public function isRegisteredUserUserValid()
    {
        return null === $this['registeredUser'] || $this['registeredUser'] instanceof UserEntity;
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return boolean Whether everything is valid or not
     */
    public function validate()
    {
        if (true === $this->_bypassValidation) {
            return true;
        }
    
        $validator = ServiceUtil::get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $flashBag = ServiceUtil::get('session')->getFlashBag();
            foreach ($errors as $error) {
                $flashBag->add('error', $error->getMessage());
            }
    
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'rkteammodule.ui_hooks.persons';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Person ' . $this->createCompositeIdentifier() . ': ' . $this->getTitleFromDisplayPattern();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!($this->id)) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifiers
        $this->setId(0);
    
        // reset workflow
        $this->resetWorkflow();
    
        // reset upload fields
        $this->setTeamMemberImage(null);
        $this->setTeamMemberImageMeta([]);
        $this->setTeamMemberImageUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
