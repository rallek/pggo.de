<?php
/**
 * NewsDates.
 *
 * @copyright Ralf Koester (Pggo)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <webmaster@pggo.de>.
 * @link http://pggo.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace Pggo\NewsDatesModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Pggo\NewsDatesModule\Traits\EntityWorkflowTrait;
use Pggo\NewsDatesModule\Traits\StandardFieldsTrait;

use RuntimeException;
use ServiceUtil;
use Zikula\Core\Doctrine\EntityAccess;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for article entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractArticleEntity extends EntityAccess
{
    /**
     * Hook entity workflow field and behaviour.
     */
    use EntityWorkflowTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'article';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed
     */
    protected $_bypassValidation = false;
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="text", length=10000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="10000")
     * @var text $teaser
     */
    protected $teaser = '';
    
    /**
     * @ORM\Column(type="text", length=20000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="20000")
     * @var text $bodyText
     */
    protected $bodyText = '';
    
    /**
     * Image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageMeta
     */
    protected $imageMeta = [];
    
    /**
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $image
     */
    protected $image = null;
    
    /**
     * Full image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUrl
     */
    protected $imageUrl = '';
    
    /**
     * copyright of the image
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $copyright
     */
    protected $copyright = '';
    
    /**
     * notes are not visible for the Users. It is only for the admins.
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $notes
     */
    protected $notes = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $displayOnIndex
     */
    protected $displayOnIndex = true;
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @var DateTime $startDate
     */
    protected $startDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @var DateTime $endDatetime
     */
    protected $endDatetime;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $views
     */
    protected $views = 0;
    
    
    /**
     * @Gedmo\Slug(fields={"title"}, updatable=true, unique=false, separator="-", style="lower")
     * @ORM\Column(type="string", length=255, unique=false)
     * @Assert\NotBlank()
     * @Assert\Length(min="1", max="255")
     * @var string $slug
     */
    protected $slug;
    
    /**
     * @ORM\OneToMany(targetEntity="\Pggo\NewsDatesModule\Entity\ArticleCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \Pggo\NewsDatesModule\Entity\ArticleCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - Many articles [articles] are linked by one event [event] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="Pggo\NewsDatesModule\Entity\EventEntity", inversedBy="articles")
     * @ORM\JoinTable(name="pggo_newsdate_event")
     * @Assert\Type(type="Pggo\NewsDatesModule\Entity\EventEntity")
     * @var \Pggo\NewsDatesModule\Entity\EventEntity $event
     */
    protected $event;
    
    /**
     * Bidirectional - One article [article] has many pictures [pictures] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="Pggo\NewsDatesModule\Entity\PictureEntity", mappedBy="article", cascade={"all"})
     * @ORM\JoinTable(name="pggo_newsdate_articlepictures")
     * @var \Pggo\NewsDatesModule\Entity\PictureEntity[] $pictures
     */
    protected $pictures = null;
    
    
    /**
     * ArticleEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->views = 1;
        $this->startDate = \DateTime::createFromFormat('Y-m-d H:i:s', date('Y-m-d H:i:s'));
        $this->endDatetime = \DateTime::createFromFormat('Y-m-d H:i:s', '2099-12-31 00:00:00');
        $this->initWorkflow();
        $this->pictures = new ArrayCollection();
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Returns the _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Sets the _bypass validation.
     *
     * @param boolean $_bypassValidation
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = intval($id);
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = isset($workflowState) ? $workflowState : '';
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        $this->title = isset($title) ? $title : '';
    }
    
    /**
     * Returns the teaser.
     *
     * @return text
     */
    public function getTeaser()
    {
        return $this->teaser;
    }
    
    /**
     * Sets the teaser.
     *
     * @param text $teaser
     *
     * @return void
     */
    public function setTeaser($teaser)
    {
        $this->teaser = isset($teaser) ? $teaser : '';
    }
    
    /**
     * Returns the body text.
     *
     * @return text
     */
    public function getBodyText()
    {
        return $this->bodyText;
    }
    
    /**
     * Sets the body text.
     *
     * @param text $bodyText
     *
     * @return void
     */
    public function setBodyText($bodyText)
    {
        $this->bodyText = isset($bodyText) ? $bodyText : '';
    }
    
    /**
     * Returns the image.
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }
    
    /**
     * Sets the image.
     *
     * @param string $image
     *
     * @return void
     */
    public function setImage($image)
    {
        $this->image = $image;
    }
    
    /**
     * Returns the image url.
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->imageUrl;
    }
    
    /**
     * Sets the image url.
     *
     * @param string $imageUrl
     *
     * @return void
     */
    public function setImageUrl($imageUrl)
    {
        $this->imageUrl = $imageUrl;
    }
    
    /**
     * Returns the image meta.
     *
     * @return array
     */
    public function getImageMeta()
    {
        return $this->imageMeta;
    }
    
    /**
     * Sets the image meta.
     *
     * @param array $imageMeta
     *
     * @return void
     */
    public function setImageMeta($imageMeta = [])
    {
        $this->imageMeta = $imageMeta;
    }
    
    /**
     * Returns the copyright.
     *
     * @return string
     */
    public function getCopyright()
    {
        return $this->copyright;
    }
    
    /**
     * Sets the copyright.
     *
     * @param string $copyright
     *
     * @return void
     */
    public function setCopyright($copyright)
    {
        $this->copyright = isset($copyright) ? $copyright : '';
    }
    
    /**
     * Returns the notes.
     *
     * @return text
     */
    public function getNotes()
    {
        return $this->notes;
    }
    
    /**
     * Sets the notes.
     *
     * @param text $notes
     *
     * @return void
     */
    public function setNotes($notes)
    {
        $this->notes = isset($notes) ? $notes : '';
    }
    
    /**
     * Returns the display on index.
     *
     * @return boolean
     */
    public function getDisplayOnIndex()
    {
        return $this->displayOnIndex;
    }
    
    /**
     * Sets the display on index.
     *
     * @param boolean $displayOnIndex
     *
     * @return void
     */
    public function setDisplayOnIndex($displayOnIndex)
    {
        if ($displayOnIndex !== $this->displayOnIndex) {
            $this->displayOnIndex = (bool)$displayOnIndex;
        }
    }
    
    /**
     * Returns the start date.
     *
     * @return DateTime
     */
    public function getStartDate()
    {
        return $this->startDate;
    }
    
    /**
     * Sets the start date.
     *
     * @param DateTime $startDate
     *
     * @return void
     */
    public function setStartDate($startDate)
    {
        if (is_object($startDate) && $startDate instanceOf \DateTime) {
            $this->startDate = $startDate;
        } else {
            $this->startDate = new \DateTime($startDate);
        }
    }
    
    /**
     * Returns the end datetime.
     *
     * @return DateTime
     */
    public function getEndDatetime()
    {
        return $this->endDatetime;
    }
    
    /**
     * Sets the end datetime.
     *
     * @param DateTime $endDatetime
     *
     * @return void
     */
    public function setEndDatetime($endDatetime)
    {
        if (is_object($endDatetime) && $endDatetime instanceOf \DateTime) {
            $this->endDatetime = $endDatetime;
        } else {
            $this->endDatetime = new \DateTime($endDatetime);
        }
    }
    
    /**
     * Returns the views.
     *
     * @return integer
     */
    public function getViews()
    {
        return $this->views;
    }
    
    /**
     * Sets the views.
     *
     * @param integer $views
     *
     * @return void
     */
    public function setViews($views)
    {
        $this->views = intval($views);
    }
    
    /**
     * Returns the slug.
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }
    
    /**
     * Sets the slug.
     *
     * @param string $slug
     *
     * @return void
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;
    }
    
    /**
     * Returns the categories.
     *
     * @return ArrayCollection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @param ArrayCollection $categories
     *
     * @return void
     */
    public function setCategories(ArrayCollection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === $key = $this->collectionContains($categories, $category)) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param ArrayCollection $collection
     * @param \Pggo\NewsDatesModule\Entity\ArticleCategoryEntity $element
     *
     * @return bool|int
     */
    private function collectionContains(ArrayCollection $collection, \Pggo\NewsDatesModule\Entity\ArticleCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \Pggo\NewsDatesModule\Entity\ArticleCategoryEntity $category */
            if ($category->getCategoryRegistryId() == $element->getCategoryRegistryId()
                && $category->getCategory() == $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Returns the event.
     *
     * @return \Pggo\NewsDatesModule\Entity\EventEntity
     */
    public function getEvent()
    {
        return $this->event;
    }
    
    /**
     * Sets the event.
     *
     * @param \Pggo\NewsDatesModule\Entity\EventEntity $event
     *
     * @return void
     */
    public function setEvent($event = null)
    {
        $this->event = $event;
    }
    
    /**
     * Returns the pictures.
     *
     * @return \Pggo\NewsDatesModule\Entity\PictureEntity[]
     */
    public function getPictures()
    {
        return $this->pictures;
    }
    
    /**
     * Sets the pictures.
     *
     * @param \Pggo\NewsDatesModule\Entity\PictureEntity[] $pictures
     *
     * @return void
     */
    public function setPictures($pictures)
    {
        foreach ($pictures as $pictureSingle) {
            $this->addPictures($pictureSingle);
        }
    }
    
    /**
     * Adds an instance of \Pggo\NewsDatesModule\Entity\PictureEntity to the list of pictures.
     *
     * @param \Pggo\NewsDatesModule\Entity\PictureEntity $picture The instance to be added to the collection
     *
     * @return void
     */
    public function addPictures(\Pggo\NewsDatesModule\Entity\PictureEntity $picture)
    {
        $this->pictures->add($picture);
        $picture->setArticle($this);
    }
    
    /**
     * Removes an instance of \Pggo\NewsDatesModule\Entity\PictureEntity from the list of pictures.
     *
     * @param \Pggo\NewsDatesModule\Entity\PictureEntity $picture The instance to be removed from the collection
     *
     * @return void
     */
    public function removePictures(\Pggo\NewsDatesModule\Entity\PictureEntity $picture)
    {
        $this->pictures->removeElement($picture);
        $picture->setArticle(null);
    }
    
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $listHelper = ServiceUtil::get('pggo_newsdates_module.listentries_helper');
    
        $formattedTitle = ''
                . $this->getTitle();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getWorkflowStateAllowedValues()
    {
        $container = ServiceUtil::get('service_container');
        $helper = $container->get('pggo_newsdates_module.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForArticle();
    
        $allowedValues = ['initial'];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Checks whether the startDate value is earlier than the endDatetime value.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="The start date must be before the end date.")
     *
     * @return boolean True if data is valid else false
     */
    public function isStartDateBeforeEndDatetime()
    {
        return ($this['startDate'] < $this['endDatetime']);
    }
    
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return boolean Whether everything is valid or not
     */
    public function validate()
    {
        if (true === $this->_bypassValidation) {
            return true;
        }
    
        $validator = ServiceUtil::get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $flashBag = ServiceUtil::get('session')->getFlashBag();
            foreach ($errors as $error) {
                $flashBag->add('error', $error->getMessage());
            }
    
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'pggonewsdatesmodule.ui_hooks.articles';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        foreach ($this->pictures as $rel) {
            if (!in_array($rel, $objects, true)) {
                $objects[] = $rel;
                $rel->getRelatedObjectsToPersist($objects);
            }
        }
    
        return $objects;
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Article ' . $this->createCompositeIdentifier() . ': ' . $this->getTitleFromDisplayPattern();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a deep copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!($this->id)) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifiers
        $this->setId(0);
    
        // reset workflow
        $this->resetWorkflow();
    
        // reset upload fields
        $this->setImage(null);
        $this->setImageMeta([]);
        $this->setImageUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
        // handle related objects
        // prevent shared references by doing a deep copy - see (2) and (3) for more information
        // clone referenced objects only if a new record is necessary
        $collection = $this->pictures;
        $this->pictures = new ArrayCollection();
        foreach ($collection as $rel) {
            $this->addPictures( clone $rel);
        }
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
