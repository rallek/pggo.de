<?php
/**
 * Helper.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\HelperModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractHelperEvents
{
    /**
     * The rkhelpermodule.linker_post_load event is thrown when linkers
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const LINKER_POST_LOAD = 'rkhelpermodule.linker_post_load';
    
    /**
     * The rkhelpermodule.linker_pre_persist event is thrown before a new linker
     * is created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const LINKER_PRE_PERSIST = 'rkhelpermodule.linker_pre_persist';
    
    /**
     * The rkhelpermodule.linker_post_persist event is thrown after a new linker
     * has been created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const LINKER_POST_PERSIST = 'rkhelpermodule.linker_post_persist';
    
    /**
     * The rkhelpermodule.linker_pre_remove event is thrown before an existing linker
     * is removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const LINKER_PRE_REMOVE = 'rkhelpermodule.linker_pre_remove';
    
    /**
     * The rkhelpermodule.linker_post_remove event is thrown after an existing linker
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const LINKER_POST_REMOVE = 'rkhelpermodule.linker_post_remove';
    
    /**
     * The rkhelpermodule.linker_pre_update event is thrown before an existing linker
     * is updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const LINKER_PRE_UPDATE = 'rkhelpermodule.linker_pre_update';
    
    /**
     * The rkhelpermodule.linker_post_update event is thrown after an existing new linker
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterLinkerEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const LINKER_POST_UPDATE = 'rkhelpermodule.linker_post_update';
    
    /**
     * The rkhelpermodule.carouselitem_post_load event is thrown when carousel items
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const CAROUSELITEM_POST_LOAD = 'rkhelpermodule.carouselitem_post_load';
    
    /**
     * The rkhelpermodule.carouselitem_pre_persist event is thrown before a new carousel item
     * is created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const CAROUSELITEM_PRE_PERSIST = 'rkhelpermodule.carouselitem_pre_persist';
    
    /**
     * The rkhelpermodule.carouselitem_post_persist event is thrown after a new carousel item
     * has been created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const CAROUSELITEM_POST_PERSIST = 'rkhelpermodule.carouselitem_post_persist';
    
    /**
     * The rkhelpermodule.carouselitem_pre_remove event is thrown before an existing carousel item
     * is removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const CAROUSELITEM_PRE_REMOVE = 'rkhelpermodule.carouselitem_pre_remove';
    
    /**
     * The rkhelpermodule.carouselitem_post_remove event is thrown after an existing carousel item
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const CAROUSELITEM_POST_REMOVE = 'rkhelpermodule.carouselitem_post_remove';
    
    /**
     * The rkhelpermodule.carouselitem_pre_update event is thrown before an existing carousel item
     * is updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const CAROUSELITEM_PRE_UPDATE = 'rkhelpermodule.carouselitem_pre_update';
    
    /**
     * The rkhelpermodule.carouselitem_post_update event is thrown after an existing new carousel item
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselItemEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const CAROUSELITEM_POST_UPDATE = 'rkhelpermodule.carouselitem_post_update';
    
    /**
     * The rkhelpermodule.carousel_post_load event is thrown when carousells
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const CAROUSEL_POST_LOAD = 'rkhelpermodule.carousel_post_load';
    
    /**
     * The rkhelpermodule.carousel_pre_persist event is thrown before a new carousel
     * is created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const CAROUSEL_PRE_PERSIST = 'rkhelpermodule.carousel_pre_persist';
    
    /**
     * The rkhelpermodule.carousel_post_persist event is thrown after a new carousel
     * has been created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const CAROUSEL_POST_PERSIST = 'rkhelpermodule.carousel_post_persist';
    
    /**
     * The rkhelpermodule.carousel_pre_remove event is thrown before an existing carousel
     * is removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const CAROUSEL_PRE_REMOVE = 'rkhelpermodule.carousel_pre_remove';
    
    /**
     * The rkhelpermodule.carousel_post_remove event is thrown after an existing carousel
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const CAROUSEL_POST_REMOVE = 'rkhelpermodule.carousel_post_remove';
    
    /**
     * The rkhelpermodule.carousel_pre_update event is thrown before an existing carousel
     * is updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const CAROUSEL_PRE_UPDATE = 'rkhelpermodule.carousel_pre_update';
    
    /**
     * The rkhelpermodule.carousel_post_update event is thrown after an existing new carousel
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterCarouselEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const CAROUSEL_POST_UPDATE = 'rkhelpermodule.carousel_post_update';
    
    /**
     * The rkhelpermodule.image_post_load event is thrown when images
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterImageEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const IMAGE_POST_LOAD = 'rkhelpermodule.image_post_load';
    
    /**
     * The rkhelpermodule.image_pre_persist event is thrown before a new image
     * is created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterImageEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const IMAGE_PRE_PERSIST = 'rkhelpermodule.image_pre_persist';
    
    /**
     * The rkhelpermodule.image_post_persist event is thrown after a new image
     * has been created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterImageEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const IMAGE_POST_PERSIST = 'rkhelpermodule.image_post_persist';
    
    /**
     * The rkhelpermodule.image_pre_remove event is thrown before an existing image
     * is removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterImageEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const IMAGE_PRE_REMOVE = 'rkhelpermodule.image_pre_remove';
    
    /**
     * The rkhelpermodule.image_post_remove event is thrown after an existing image
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterImageEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const IMAGE_POST_REMOVE = 'rkhelpermodule.image_post_remove';
    
    /**
     * The rkhelpermodule.image_pre_update event is thrown before an existing image
     * is updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterImageEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const IMAGE_PRE_UPDATE = 'rkhelpermodule.image_pre_update';
    
    /**
     * The rkhelpermodule.image_post_update event is thrown after an existing new image
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterImageEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const IMAGE_POST_UPDATE = 'rkhelpermodule.image_post_update';
    
    /**
     * The rkhelpermodule.info_post_load event is thrown when infos
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterInfoEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const INFO_POST_LOAD = 'rkhelpermodule.info_post_load';
    
    /**
     * The rkhelpermodule.info_pre_persist event is thrown before a new info
     * is created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterInfoEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const INFO_PRE_PERSIST = 'rkhelpermodule.info_pre_persist';
    
    /**
     * The rkhelpermodule.info_post_persist event is thrown after a new info
     * has been created in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterInfoEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const INFO_POST_PERSIST = 'rkhelpermodule.info_post_persist';
    
    /**
     * The rkhelpermodule.info_pre_remove event is thrown before an existing info
     * is removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterInfoEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const INFO_PRE_REMOVE = 'rkhelpermodule.info_pre_remove';
    
    /**
     * The rkhelpermodule.info_post_remove event is thrown after an existing info
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterInfoEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const INFO_POST_REMOVE = 'rkhelpermodule.info_post_remove';
    
    /**
     * The rkhelpermodule.info_pre_update event is thrown before an existing info
     * is updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterInfoEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const INFO_PRE_UPDATE = 'rkhelpermodule.info_pre_update';
    
    /**
     * The rkhelpermodule.info_post_update event is thrown after an existing new info
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\HelperModule\Event\FilterInfoEvent instance.
     *
     * @see RK\HelperModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const INFO_POST_UPDATE = 'rkhelpermodule.info_post_update';
    
}
