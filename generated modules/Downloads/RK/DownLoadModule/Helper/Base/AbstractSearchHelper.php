<?php
/**
 * DownLoad.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://oldtimer-ig-osnabrueck.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\DownLoadModule\Helper\Base;

use Zikula\Core\RouteUrl;
use Zikula\SearchModule\AbstractSearchable;
use RK\DownLoadModule\Helper\FeatureActivationHelper;

/**
 * Search helper base class.
 */
abstract class AbstractSearchHelper extends AbstractSearchable
{
    /**
     * {@inheritdoc}
     */
    public function getOptions($active, $modVars = null)
    {
        $permissionApi = $this->container->get('zikula_permissions_module.api.permission');
    
        if (!$permissionApi->hasPermission('RKDownLoadModule::', '::', ACCESS_READ)) {
            return '';
        }
    
        $templateParameters = [];
    
        $searchTypes = ['file'];
        foreach ($searchTypes as $searchType) {
            $templateParameters['active_' . $searchType] = !isset($args['rKDownLoadModuleSearchTypes']) || in_array($searchType, $args['rKDownLoadModuleSearchTypes']);
        }
    
        return $this->getContainer()->get('twig')->render('@RKDownLoadModule/Search/options.html.twig', $templateParameters);
    }
    
    /**
     * {@inheritdoc}
     */
    public function getResults(array $words, $searchType = 'AND', $modVars = null)
    {
        $permissionApi = $this->container->get('zikula_permissions_module.api.permission');
        $featureActivationHelper = $this->container->get('rk_download_module.feature_activation_helper');
        $request = $this->container->get('request_stack')->getCurrentRequest();
    
        if (!$permissionApi->hasPermission('RKDownLoadModule::', '::', ACCESS_READ)) {
            return [];
        }
    
        // save session id as it is used when inserting search results below
        $sessionId = $this->container->get('session')->getId();
    
        // initialise array for results
        $results = [];
    
        // retrieve list of activated object types
        $searchTypes = isset($modVars['objectTypes']) ? (array)$modVars['objectTypes'] : [];
        if (!is_array($searchTypes) || !count($searchTypes)) {
            if ($this->request->isMethod('GET')) {
                $searchTypes = $this->request->query->get('rKDownLoadModuleSearchTypes', []);
            } elseif ($this->request->isMethod('POST')) {
                $searchTypes = $this->request->request->get('rKDownLoadModuleSearchTypes', []);
            }
        }
    
        $controllerHelper = $this->container->get('rk_download_module.controller_helper');
        $allowedTypes = $controllerHelper->getObjectTypes('helper', ['helper' => 'search', 'action' => 'getResults']);
    
        foreach ($searchTypes as $objectType) {
            if (!in_array($objectType, $allowedTypes)) {
                continue;
            }
    
            $whereArray = [];
            $languageField = null;
            switch ($objectType) {
                case 'file':
                    $whereArray[] = 'tbl.workflowState';
                    $whereArray[] = 'tbl.fileName';
                    $whereArray[] = 'tbl.myFile';
                    $whereArray[] = 'tbl.myDescription';
                    break;
            }
    
            $repository = $this->container->get('rk_download_module.entity_factory')->getRepository($objectType);
    
            // build the search query without any joins
            $qb = $repository->genericBaseQuery('', '', false);
    
            // build where expression for given search type
            $whereExpr = $this->formatWhere($qb, $words, $whereArray, $searchType);
            $qb->andWhere($whereExpr);
    
            $query = $qb->getQuery();
    
            // set a sensitive limit
            $query->setFirstResult(0)
                  ->setMaxResults(250);
    
            // fetch the results
            $entities = $query->getResult();
    
            if (count($entities) == 0) {
                continue;
            }
    
            $descriptionField = $repository->getDescriptionFieldName();
    
            $entitiesWithDisplayAction = ['file'];
    
            foreach ($entities as $entity) {
                $urlArgs = $entity->createUrlArgs();
                $hasDisplayAction = in_array($objectType, $entitiesWithDisplayAction);
    
                $instanceId = $entity->createCompositeIdentifier();
                // perform permission check
                if (!$permissionApi->hasPermission('RKDownLoadModule:' . ucfirst($objectType) . ':', $instanceId . '::', ACCESS_OVERVIEW)) {
                    continue;
                }
                if (in_array($objectType, ['file'])) {
                    if ($featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $objectType)) {
                        if (!$this->container->get('rk_download_module.category_helper')->hasPermission($entity)) {
                            continue;
                        }
                    }
                }
    
                $description = !empty($descriptionField) ? $entity[$descriptionField] : '';
                $created = isset($entity['createdBy']) ? $entity['createdBy'] : null;
    
                $urlArgs['_locale'] = (null !== $languageField && !empty($entity[$languageField])) ? $entity[$languageField] : $this->request->getLocale();
    
                $displayUrl = $hasDisplayAction ? new RouteUrl('rkdownloadmodule_' . $objectType . '_display', $urlArgs) : '';
    
                $results[] = [
                    'title' => $entity->getTitleFromDisplayPattern(),
                    'text' => $description,
                    'module' => 'RKDownLoadModule',
                    'sesid' => $sessionId,
                    'created' => $created,
                    'url' => $displayUrl
                ];
            }
        }
    
        return $results;
    }
}
