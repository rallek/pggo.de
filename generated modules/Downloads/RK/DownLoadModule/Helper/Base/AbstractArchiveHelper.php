<?php
/**
 * DownLoad.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://oldtimer-ig-osnabrueck.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\DownLoadModule\Helper\Base;

use Psr\Log\LoggerInterface;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\PermissionsModule\Api\PermissionApi;
use RK\DownLoadModule\Entity\Factory\DownLoadFactory;
use RK\DownLoadModule\Helper\HookHelper;
use RK\DownLoadModule\Helper\WorkflowHelper;

/**
 * Archive helper base class.
 */
abstract class AbstractArchiveHelper
{
    /**
     * @var TranslatorInterface
     */
    protected $translator;

    /**
     * @var SessionInterface
     */
    protected $session;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * @var PermissionApi
     */
    protected $permissionApi;

    /**
     * @var DownLoadFactory
     */
    protected $entityFactory;

    /**
     * @var WorkflowHelper
     */
    protected $workflowHelper;

    /**
     * @var HookHelper
     */
    protected $hookHelper;

    /**
     * ArchiveHelper constructor.
     *
     * @param TranslatorInterface $translator     Translator service instance
     * @param SessionInterface    $session        Session service instance
     * @param LoggerInterface     $logger         Logger service instance
     * @param PermissionApi       $permissionApi  PermissionApi service instance
     * @param DownLoadFactory $entityFactory DownLoadFactory service instance
     * @param WorkflowHelper      $workflowHelper WorkflowHelper service instance
     * @param HookHelper          $hookHelper     HookHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        SessionInterface $session,
        LoggerInterface $logger,
        PermissionApi $permissionApi,
        DownLoadFactory $entityFactory,
        WorkflowHelper $workflowHelper,
        HookHelper $hookHelper)
    {
        $this->translator = $translator;
        $this->session = $session;
        $this->logger = $logger;
        $this->permissionApi = $permissionApi;
        $this->entityFactory = $entityFactory;
        $this->workflowHelper = $workflowHelper;
        $this->hookHelper = $hookHelper;
    }

    /**
     * Moves obsolete data into the archive.
     */
    public function archiveObjects()
    {
        $randProbability = mt_rand(1, 1000);
    
        if ($randProbability < 750) {
            return;
        }
    
        $this->session->set('RKDownLoadModuleAutomaticArchiving', true);
    
        // perform update for files becoming archived
        $logArgs = ['app' => 'RKDownLoadModule', 'entity' => 'file'];
        $this->logger->notice('{app}: Automatic archiving for the {entity} entity started.', $logArgs);
        $repository = $this->entityFactory->getRepository('file');
        $repository->archiveObjects($this->permissionApi, $this->session, $this->translator, $this->workflowHelper, $this->hookHelper);
        $this->logger->notice('{app}: Automatic archiving for the {entity} entity completed.', $logArgs);
    
        $this->session->del('RKDownLoadModuleAutomaticArchiving');
    }
}
